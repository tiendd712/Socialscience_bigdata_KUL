group_by(companyname) %>% summarise(check = n_distinct(companyurn)) %>%
arrange(desc(check)))
View(experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ) %>%
group_by(companyurn) %>% summarise(check = n_distinct(companyname)) %>%
arrange(desc(check)))
experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ) %>% filter(companyurn == 1038)
experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ) %>% filter(companyurn == 11549548)
experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ) %>% filter(companyurn == 19225151)
experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ) %>% filter(companyurn == 23585)
company_no_urn %>% filter(str_detect(companyname, "booking"))
company_no_urn = experience_data_filter %>% filter(is.na(companyurn)) %>%
distinct(companyname)
company_no_urn = company_no_urn %>%
left_join(experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ),
by = "companyname") %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
companyurn))
company_no_urn = experience_data_filter %>% filter(is.na(companyurn)) %>%
distinct(companyname)
company_no_urn = company_no_urn %>%
left_join(experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ),
by = "companyname") %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ companyurn))
company_no_urn = experience_data_filter %>% filter(is.na(companyurn)) %>%
distinct(companyname)
company_no_urn = company_no_urn %>%
left_join(experience_data_filter %>% filter(!is.na(companyurn)) %>% distinct(companyname,companyurn ),
by = "companyname") %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn)))
company_data = experience_data_filter %>% select(employee_id, companyurn)
View(company_data)
company_data = experience_data_filter %>% select(employee_id, companyurn, companyname)
View(company_data)
experience_data_filter %>%
select(employee_id, companyurn, companyname) %>%
left_join(company_no_urn %>% select(companyname, companyurn_fix))
company_data = experience_data_filter %>%
select(employee_id, companyurn, companyname) %>%
left_join(company_no_urn %>% select(companyname, companyurn_fix),
by = "companyname")
company_no_urn %>% filter(is.na(companyurn)) %>% nrow()
company_no_urn %>% filter(!is.na(companyurn)) %>% nrow()
experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn)))
experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn))) %>% nrow()
num_company_data = experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn))) %>%
group_by(employee_id) %>%
summarise(num_company = n_distinct(companyurn_fix))
View(num_company_data)
View(experience_data)
View(experience_data_filter)
View(number_job_data)
library(tidyverse)
library(jsonlite)
library(tokenizers)
library(tidytext)
library(quanteda)
library(lubridate)
View(career_progress_data)
data_model = career_progress_data %>%
inner_join(experience_data_intern, by = "employee_id") %>%
inner_join(number_job_data, by = "employee_id") %>%
inner_join(num_company_data, by = "employee_id")
View(data_model)
experience_data_intern
data_model = career_progress_data %>%
inner_join(number_job_data, by = "employee_id") %>%
inner_join(num_company_data, by = "employee_id")
View(data_model)
library(tidyverse)
library(jsonlite)
library(tokenizers)
library(tidytext)
library(quanteda)
library(lubridate)
View(data_model)
write.csv(data_model, "C:/Users/doduc/Github/Socialscience_bigdata_KUL/data_processing/data_model.csv", row.names = FALSE)
library(caret)
library(dplyr)
library(randomForest)
library(xgboost)
library(DMwR2)
library(caret)
library(dplyr)
library(randomForest)
library(xgboost)
library(DMwR2)
rm(list = ls())
# Load data
gender_data = read_csv("../final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
library(tidyverse)
library(caret)
library(tidyverse)
library(randomForest)
library(xgboost)
library(DMwR2)
# Load data
gender_data = read_csv("../final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
getwd()
setwd("C:/Users/")
# Load data
gender_data = read_csv("../final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
# Load data
gender_data = read_csv("../data_processing/final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
setwd("C:/Users/doduc/Github/Socialscience_bigdata_KUL/")
# Load data
gender_data = read_csv("/data_processing/final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
setwd("C:/Users/doduc/Github/Socialscience_bigdata_KUL")
# Load data
gender_data = read_csv("/data_processing/final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
setwd("C:/Users/doduc/Github/Socialscience_bigdata_KUL/")
getwd()
# Load data
gender_data = read_csv("data_processing/final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
View(gender_data)
setwd("C:/Users/doduc/Github/Socialscience_bigdata_KUL/data_processing/")
getwd()
gender_data = read_csv("final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
edu_data = read_csv("final_processed_data/edu_processed.csv")
lang_data = read_csv("final_processed_data/lang_processed.csv")
follower_data = read_csv("follower_data.csv")
connection_data = read_csv("connection_data.csv")
skill_data = read_csv("final_processed_data/skill_processed.csv")
exp_data = read_csv("data_model.csv")
View(skill_data)
View(exp_data)
df <- exp_data %>%
merge(edu_data, by = "employee_id", all.x = TRUE) %>%
merge(lang_data, by = "employee_id", all.x = TRUE) %>%
merge(connection_data, by = "employee_id", all.x = TRUE) %>%
merge(follower_data, by = "employee_id", all.x = TRUE) %>%
merge(skill_data, by = "employee_id", all.x = TRUE) %>%
merge(gender_data, by = "employee_id", all.x = TRUE) %>%
select(-skills, -skill_trans, -strongest_skill, -skill4, -last_edu_year, -employee_id, -promote_level_1, -promote_general) %>%
mutate(gender_predict = ifelse(is.na(gender_predict), "Neutral", gender_predict)) %>%
mutate(promote_level_2 = ifelse(is.na(promote_level_2), 0, promote_level_2)) %>%
mutate(highest_edu = ifelse(is.na(highest_edu), "bachelor", highest_edu)) %>%
replace(is.na(.), 0) %>%
mutate(promote_level_2 = factor(promote_level_2, levels = c(0, 1), labels = c(0, 1)),
gender_predict = factor(gender_predict, levels = c("Neutral", "Man", "Woman"), labels = c(0,1,2)),
highest_edu = factor(highest_edu, levels = c("bachelor", "master", "phd"), labels=c(0,1,2)))
View(df)
View(exp_data)
exp_data %>% filter(time_work == 0)
exp_data_full = read_csv("experience_data.csv")
View(exp_data_full)
exp_data_full %>% filter(employee_id == "t_1505")
View(exp_data_full %>% filter(employee_id == "t_1505"))
setwd("C:/Users/doduc/Github/Socialscience_bigdata_KUL/data_processing/")
getwd()
experience_data = read_csv("C:/Users/doduc/Github/Socialscience_bigdata_KUL/data_processing/experience_data.csv")
experience_data$X = row.names(experience_data)
experience_data$title = str_to_lower(experience_data$title)
experience_data_job = experience_data %>% filter(str_detect(title, ".*data.*")|
str_detect(title, ".* ai .*")|
str_detect(title, ".*business.*intelligence.*")|
str_detect(title, ".* bi .*")|
str_detect(title, ".*developer.*")|
str_detect(title, ".*machine.*learning.*")|
str_detect(title, ".*risk.*")|
str_detect(title, ".*artificial.*intelligence.*")|
str_detect(title, ".*software.*")|
str_detect(title, ".*computer.*vision.*")|
str_detect(title, ".*deep.*learning.*")|
str_detect(title, ".*full.*stack.*")|
str_detect(title, ".*natural.*language.*")|
str_detect(title, ".* nlp .*")|
str_detect(title, ".*statistic.*")|
str_detect(title, ".* mlops .*")|
str_detect(title, ".*quantitative.*")|
str_detect(title, ".*model.*")|
str_detect(title, ".*actuarial.*")|
str_detect(title, ".*business.*analyst.*")|
str_detect(title, ".*business.*analytics.*")|
str_detect(title, ".*ml.*engineer.*"))
experience_data_job$companyname = str_to_lower(experience_data_job$companyname)
experience_data_job$industry = str_to_lower(experience_data_job$industry)
### we would exclude the highest position level and self employee, freelance
experience_data_po = experience_data_job %>% filter(str_detect(title, ".*product.*owner*"))
experience_data_filter = experience_data_job %>%
filter(!str_detect(title, ".* ceo .*") &
!str_detect(title, ".* cto .*") &
!str_detect(title, ".*founder.*") &
!str_detect(title, ".*founding.*") &
!str_detect(title, ".*chief.*") &
!str_detect(title, ".*owner.*")&
!str_detect(title, ".*president.*") &
!str_detect(companyname, ".*self.*employ.*")&
!str_detect(companyname, ".*freelance.*"))
experience_data_filter = experience_data_filter %>% bind_rows(experience_data_po)
## we need to exclude the jobs related to academic field like phd, teaching, lecture and also intern, working student job
experience_data_filter = experience_data_filter %>%
filter(!str_detect(title, "student") &
!str_detect(title, ".* phd .*") &
!str_detect(title, "intern") &
!str_detect(title, "teaching") &
!str_detect(title, "teacher") &
!str_detect(title, "lecture")) %>%
filter(industry != "research" | is.na(industry))
## we also delete the job title with freelance term
experience_data_filter = experience_data_filter %>%
filter(!str_detect(title, "freelance"))
### we need to categorize job title
experience_data_filter = experience_data_filter %>%
mutate(job_level_1 = case_when((str_detect(title, ".*lead.*") & !str_detect(title, ".*lead to.*"))|
str_detect(title, ".*principal.*") ~ 1,
T ~ 0),
job_level_2 = case_when(str_detect(title, ".*head.*")|
str_detect(title, ".*supervisor.*")|
str_detect(title, ".*manager.*") |
str_detect(title, ".*director.*") |
str_detect(title, ".*expert.*") ~ 1,
T ~ 0))
View(experience_data_filter %>% filter(employee_id == "t_1505"))
career_progress_extract = function(id){
experience_user_data = experience_data_filter %>% filter(employee_id == id)
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
max_date = max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
min_date = min(experience_user_data$start_date)
if (is.na(max_date)){
duration = difftime(Sys.Date(), min_date, units = "days")
}
else{duration = difftime(max_date, min_date, units = "days")}
return(data.frame(employee_id = id,
promote_level_1 = job_level_1,
promote_level_2 = job_level_2,
time_work = as.numeric(duration)))
}
career_progress_data = data.frame()
for (id in unique(experience_data_filter$employee_id)){
career_progress_data = rbind(career_progress_data, career_progress_extract(id))
}
career_progress_data = career_progress_data %>%
mutate(promote_general = case_when(promote_level_1 == 1 | promote_level_2 == 1 ~ 1,
T ~ 0))
### create variable indicate that the employee have an intern or not
experience_data_intern = experience_data_job %>%
filter(str_detect(title, ".*student.*")|
str_detect(title, ".*intern.*")) %>% distinct(employee_id) %>%
mutate(intern = 1)
career_progress_data = career_progress_data %>%
left_join(experience_data_intern, by = "employee_id") %>%
mutate(intern = case_when(is.na(intern) ~ 0,
T ~ 1))
### create variable indicate the number of job for each employee_id:
number_job_data = experience_data_filter %>%
group_by(employee_id) %>%
summarise(num_job = n())
### create variable indicate the number of company for each employee_id:
num_company_data = experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn))) %>%
group_by(employee_id) %>%
summarise(num_company = n_distinct(companyurn_fix))
career_progress_data
View(career_progress_data %>% filter(employee_id == "t_1505"))
id = "t_1505"
experience_user_data = experience_data_filter %>% filter(employee_id == id)
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
job_level_2
job_level_1
experience_user_data
max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
sum(is.na(df)) > 0
View(df)
df %>% filter(time_work == 0) %>% nrow()
View(df)
df <- exp_data %>%
merge(edu_data, by = "employee_id", all.x = TRUE) %>%
merge(lang_data, by = "employee_id", all.x = TRUE) %>%
merge(connection_data, by = "employee_id", all.x = TRUE) %>%
merge(follower_data, by = "employee_id", all.x = TRUE) %>%
merge(skill_data, by = "employee_id", all.x = TRUE) %>%
merge(gender_data, by = "employee_id", all.x = TRUE) %>%
select(-skills, -skill_trans, -strongest_skill, -skill4, -last_edu_year, -promote_level_1, -promote_general) %>%
mutate(gender_predict = ifelse(is.na(gender_predict), "Neutral", gender_predict)) %>%
mutate(promote_level_2 = ifelse(is.na(promote_level_2), 0, promote_level_2)) %>%
mutate(highest_edu = ifelse(is.na(highest_edu), "bachelor", highest_edu)) %>%
replace(is.na(.), 0) %>%
mutate(promote_level_2 = factor(promote_level_2, levels = c(0, 1), labels = c(0, 1)),
gender_predict = factor(gender_predict, levels = c("Neutral", "Man", "Woman"), labels = c(0,1,2)),
highest_edu = factor(highest_edu, levels = c("bachelor", "master", "phd"), labels=c(0,1,2)))
View(df)
experience_data_filter %>% filter(employee_id == "t_10004")
View(experience_data_filter %>% filter(employee_id == "t_10004"))
df %>% filter(time_work == 0) %>% nrow()
id = "t_10004"
experience_data_filter %>% filter(employee_id == id)
experience_user_data = experience_data_filter %>% filter(employee_id == id)
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
job_level_1
job_level_2
max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
min(experience_user_data$start_date)
min(c(3, 4, NA))
min(c(3, 4, NA), rm.na =T)
min(c(3, 4, NA), rm.na =F)
min(c(3, 4, NA), na.rm  =F)
min(c(3, 4, NA), na.rm  =T)
min(c(NA, NA, NA), na.rm  =T)
str(min(c(NA, NA, NA), na.rm  =T))
k = min(c(NA, NA, NA), na.rm  =T)
k == Inf
experience_user_data
max_date
difftime("2022-04-01", 0)
min("2022-04-01", 0)
experience_user_data = experience_data_filter %>% filter(employee_id == id & !is.na(start_date))
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
max_date = max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
min_date = min(experience_user_data$start_date)
job_level_1
job_level_2
max_date
min_date
duration = difftime(Sys.Date(), min_date, units = "days")
duration
View(experience_data_filter %>% filter(str_detect(title, "studeren")))
View(experience_data_filter %>% filter(str_detect(title, "stud")))
View(experience_data_filter %>% filter(str_detect(title, "studeer")))
career_progress_extract = function(id){
experience_user_data = experience_data_filter %>% filter(employee_id == id & !is.na(start_date))
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
max_date = max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
min_date = min(experience_user_data$start_date)
if (is.na(max_date)){
duration = difftime(Sys.Date(), min_date, units = "days")
}
else{duration = difftime(max_date, min_date, units = "days")}
return(data.frame(employee_id = id,
promote_level_1 = job_level_1,
promote_level_2 = job_level_2,
time_work = as.numeric(duration)))
}
career_progress_data = data.frame()
for (id in unique(experience_data_filter$employee_id)){
career_progress_data = rbind(career_progress_data, career_progress_extract(id))
}
career_progress_data = career_progress_data %>%
mutate(promote_general = case_when(promote_level_1 == 1 | promote_level_2 == 1 ~ 1,
T ~ 0))
### create variable indicate that the employee have an intern or not
experience_data_intern = experience_data_job %>%
filter(str_detect(title, ".*student.*")|
str_detect(title, ".*intern.*")) %>% distinct(employee_id) %>%
mutate(intern = 1)
career_progress_data = career_progress_data %>%
left_join(experience_data_intern, by = "employee_id") %>%
mutate(intern = case_when(is.na(intern) ~ 0,
T ~ 1))
### create variable indicate the number of job for each employee_id:
number_job_data = experience_data_filter %>%
group_by(employee_id) %>%
summarise(num_job = n())
### create variable indicate the number of company for each employee_id:
num_company_data = experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn))) %>%
group_by(employee_id) %>%
summarise(num_company = n_distinct(companyurn_fix))
data_model = career_progress_data %>%
inner_join(number_job_data, by = "employee_id") %>%
inner_join(num_company_data, by = "employee_id")
View(data_model)
data_model %>% filter(employee_id == "t_10004")
data_model %>% filter(employee_id == "t_10017")
experience_data_filter %>% filter(employee_id == "t_10017")
View(experience_data_filter %>% filter(employee_id == "t_10017"))
View(df %>% filter(time_work == 0))
View(experience_data_filter %>% filter(employee_id == "t_6658
"))
View(experience_data_filter %>% filter(employee_id == "t_6658"))
View(experience_data_filter %>% filter(employee_id == "t_6370"))
View(experience_data_filter %>% filter(employee_id == "t_7558"))
View(experience_data_filter %>% filter(employee_id == "t_6318"))
View(data_model %>% filter(employee_id == "t_6318"))
experience_data_job = experience_data %>% filter(str_detect(title, ".*data.*")|
str_detect(title, ".* ai .*")|
str_detect(title, ".*business.*intelligence.*")|
str_detect(title, ".* bi .*")|
str_detect(title, ".*developer.*")|
str_detect(title, ".*machine.*learning.*")|
str_detect(title, ".*risk.*")|
str_detect(title, ".*artificial.*intelligence.*")|
str_detect(title, ".*software.*")|
str_detect(title, ".*computer.*vision.*")|
str_detect(title, ".*deep.*learning.*")|
str_detect(title, ".*full.*stack.*")|
str_detect(title, ".*natural.*language.*")|
str_detect(title, ".* nlp .*")|
str_detect(title, ".*statistic.*")|
str_detect(title, ".* mlops .*")|
str_detect(title, ".*quantitative.*")|
str_detect(title, ".*model.*")|
str_detect(title, ".*actuarial.*")|
str_detect(title, ".*business.*analyst.*")|
str_detect(title, ".*business.*analytics.*")|
str_detect(title, ".*ml.*engineer.*"))
experience_data_job$companyname = str_to_lower(experience_data_job$companyname)
experience_data_job$industry = str_to_lower(experience_data_job$industry)
### we would exclude the highest position level and self employee, freelance
experience_data_po = experience_data_job %>% filter(str_detect(title, ".*product.*owner*"))
experience_data_filter = experience_data_job %>%
filter(!str_detect(title, ".* ceo .*") &
!str_detect(title, ".* cto .*") &
!str_detect(title, ".*founder.*") &
!str_detect(title, ".*founding.*") &
!str_detect(title, ".*chief.*") &
!str_detect(title, ".*owner.*")&
!str_detect(title, ".*president.*") &
!str_detect(companyname, ".*self.*employ.*")&
!str_detect(companyname, ".*freelance.*"))
experience_data_filter = experience_data_filter %>% bind_rows(experience_data_po)
## we need to exclude the jobs related to academic field like phd, teaching, lecture and also intern, working student job
experience_data_filter = experience_data_filter %>%
filter(!str_detect(title, "student") &
!str_detect(title, ".* phd .*") &
!str_detect(title, "intern") &
!str_detect(title, "teaching") &
!str_detect(title, "teacher") &
!str_detect(title, "lecture")) %>%
filter(industry != "research" | is.na(industry))
## we also delete the job title with freelance term
experience_data_filter = experience_data_filter %>%
filter(!str_detect(title, "freelance"))
### we need to categorize job title
experience_data_filter = experience_data_filter %>%
mutate(job_level_1 = case_when((str_detect(title, ".*lead.*") & !str_detect(title, ".*lead to.*"))|
str_detect(title, ".*principal.*") |
str_detect(title, ".*senior.*") |
str_detect(title, ".* sr .*") ~ 1,
T ~ 0),
job_level_2 = case_when(str_detect(title, ".*head.*")|
str_detect(title, ".*supervisor.*")|
str_detect(title, ".*manager.*") |
str_detect(title, ".*director.*") |
str_detect(title, ".*expert.*") ~ 1,
T ~ 0))
career_progress_extract = function(id){
experience_user_data = experience_data_filter %>% filter(employee_id == id & !is.na(start_date))
job_level_1 = case_when(max(experience_user_data$job_level_1) == 0 ~ 0, T ~ 1)
job_level_2 = case_when(max(experience_user_data$job_level_2) == 0 ~ 0, T ~ 1)
max_date = max(experience_user_data[experience_user_data$start_date == max(experience_user_data$start_date), "end_date", drop = T])
min_date = min(experience_user_data$start_date)
if (is.na(max_date)){
duration = difftime(Sys.Date(), min_date, units = "days")
}
else{duration = difftime(max_date, min_date, units = "days")}
return(data.frame(employee_id = id,
promote_level_1 = job_level_1,
promote_level_2 = job_level_2,
time_work = as.numeric(duration)))
}
career_progress_data = data.frame()
for (id in unique(experience_data_filter$employee_id)){
career_progress_data = rbind(career_progress_data, career_progress_extract(id))
}
career_progress_data = career_progress_data %>%
mutate(promote_general = case_when(promote_level_1 == 1 | promote_level_2 == 1 ~ 1,
T ~ 0))
### create variable indicate that the employee have an intern or not
experience_data_intern = experience_data_job %>%
filter(str_detect(title, ".*student.*")|
str_detect(title, ".*intern.*")) %>% distinct(employee_id) %>%
mutate(intern = 1)
career_progress_data = career_progress_data %>%
left_join(experience_data_intern, by = "employee_id") %>%
mutate(intern = case_when(is.na(intern) ~ 0,
T ~ 1))
### create variable indicate the number of job for each employee_id:
number_job_data = experience_data_filter %>%
group_by(employee_id) %>%
summarise(num_job = n())
### create variable indicate the number of company for each employee_id:
num_company_data = experience_data_filter %>%
mutate(companyurn_fix = case_when(is.na(companyurn) ~ companyname,
T ~ as.character(companyurn))) %>%
group_by(employee_id) %>%
summarise(num_company = n_distinct(companyurn_fix))
### create data model
data_model = career_progress_data %>%
inner_join(number_job_data, by = "employee_id") %>%
inner_join(num_company_data, by = "employee_id")
View(data_model %>% filter(employee_id == "t_6318"))
write.csv(data_model, "C:/Users/doduc/Github/Socialscience_bigdata_KUL/data_processing/data_model.csv", row.names = FALSE)
gender_data = read_csv("final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
edu_data = read_csv("final_processed_data/edu_processed.csv")
lang_data = read_csv("final_processed_data/lang_processed.csv")
follower_data = read_csv("follower_data.csv")
connection_data = read_csv("connection_data.csv")
skill_data = read_csv("final_processed_data/skill_processed.csv")
exp_data = read_csv("data_model.csv")
exp_data_full = read_csv("experience_data.csv")
gender_data = read_csv("final_processed_data/gender_processed.csv") %>% select(employee_id, gender_predict)
edu_data = read_csv("final_processed_data/edu_processed.csv")
lang_data = read_csv("final_processed_data/lang_processed.csv")
follower_data = read_csv("follower_data.csv")
connection_data = read_csv("connection_data.csv")
skill_data = read_csv("final_processed_data/skill_processed.csv")
exp_data = read_csv("data_model.csv")
